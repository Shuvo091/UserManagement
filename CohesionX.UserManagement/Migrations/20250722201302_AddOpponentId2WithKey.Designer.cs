// <auto-generated />
using System;
using CohesionX.UserManagement.Shared.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CohesionX.UserManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250722201302_AddOpponentId2WithKey")]
    partial class AddOpponentId2WithKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetailsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.EloHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ComparisonId")
                        .HasColumnType("uuid");

                    b.Property<string>("ComparisonType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KFactorUsed")
                        .HasColumnType("integer");

                    b.Property<int>("NewElo")
                        .HasColumnType("integer");

                    b.Property<int>("OldElo")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentElo")
                        .HasColumnType("integer");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OpponentId2")
                        .HasColumnType("uuid");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonId");

                    b.HasIndex("OpponentId");

                    b.HasIndex("OpponentId2");

                    b.HasIndex("UserId");

                    b.ToTable("EloHistories");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.JobClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BookOutExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ClaimedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("JobClaims");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.JobCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComparisonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EloChange")
                        .HasColumnType("integer");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonId");

                    b.HasIndex("UserId");

                    b.ToTable("JobCompletions");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsProfessional")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.UserDialect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dialect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDialects");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.UserStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentElo")
                        .HasColumnType("integer");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastCalculated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PeakElo")
                        .HasColumnType("integer");

                    b.Property<int>("TotalJobs")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.VerificationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationRecords");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.EloHistory", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "Comparison")
                        .WithMany()
                        .HasForeignKey("ComparisonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "Opponent2")
                        .WithMany()
                        .HasForeignKey("OpponentId2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("EloHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comparison");

                    b.Navigation("Opponent");

                    b.Navigation("Opponent2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.JobClaim", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("JobClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.JobCompletion", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "Comparison")
                        .WithMany()
                        .HasForeignKey("ComparisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("JobCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comparison");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.UserDialect", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("Dialects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.UserStatistics", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithOne("Statistics")
                        .HasForeignKey("CohesionX.UserManagement.Modules.Users.Domain.Entities.UserStatistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.VerificationRecord", b =>
                {
                    b.HasOne("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("VerificationRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CohesionX.UserManagement.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Dialects");

                    b.Navigation("EloHistories");

                    b.Navigation("JobClaims");

                    b.Navigation("JobCompletions");

                    b.Navigation("Statistics");

                    b.Navigation("VerificationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
